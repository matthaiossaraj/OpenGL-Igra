import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;
import org.lwjgl.util.glu.GLU;

public class Main extends BaseWindow {

  float posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scale = 20;
  float s_posX = 0, s_posY = 0, s_posZ = 0;
  
  Cube[] cubes = new Cube[20];
  Ship ship;

	/**
	 * Initial setup of projection of the scene onto screen, lights etc.
	 */
  protected void setupView()
	{    
    initializeModels();
    
    // enable depth buffer (off by default)
    GL11.glEnable(GL11.GL_DEPTH_TEST); 
    // enable culling of back sides of polygons
    //GL11.glEnable(GL11.GL_CULL_FACE);

    // mapping from normalized to window coordinates
    GL11.glViewport(0, 0, 1024, 768);

    // setup projection matrix stack
    GL11.glMatrixMode(GL11.GL_PROJECTION);
    GL11.glLoadIdentity();
    GLU.gluPerspective(45, 1024 / (float)768, 1.0f, 300.0f);

    setCameraMatrix();    
	}
    
  protected void setCameraMatrix() {
	// model view stack 
	    GL11.glMatrixMode(GL11.GL_MODELVIEW);
	    GL11.glLoadIdentity();
	    // setup view space; 
	    // translate to 0,2,4 and rotate 30 degrees along x 
	    GL11.glTranslatef(0, 0, 0);
	    GL11.glRotatef(15.0f, 1.0f, 0.0f, 0.0f);
  }

  /** 
   * can be used for 3D model initialization
   */
  protected void initializeModels() {
	  cubes[0] = new Cube(new int[]{0,1,0,1,1,1}); // 0
	  cubes[1] = new Cube(new int[]{0,1,0,1,1,1});
	  cubes[2] = new Cube(new int[]{0,1,0,1,1,1});
	  cubes[3] = new Cube(new int[]{0,1,0,1,1,1});
	  cubes[4] = new Cube(new int[]{0,1,0,1,1,1});
	  cubes[5] = new Cube(new int[]{0,1,0,1,1,1});
	  cubes[6] = new Cube(new int[]{0,1,0,1,1,1});
	  cubes[7] = new Cube(new int[]{0,1,0,1,1,1});
	  cubes[8] = new Cube(new int[]{0,1,0,1,1,1});
	  cubes[9] = new Cube(new int[]{0,1,1,1,0,1}); // 9
	  cubes[10] = new Cube(new int[]{1,1,1,1,0,0});
	  cubes[11] = new Cube(new int[]{1,1,1,0,0,0});
	  cubes[12] = new Cube(new int[]{1,0,1,1,1,1}); //12
	  cubes[13] = new Cube(new int[]{1,0,1,0,1,1});
	  cubes[14] = new Cube(new int[]{1,0,1,0,1,1});
	  cubes[15] = new Cube(new int[]{0,1,0,0,1,1});
	  cubes[16] = new Cube(new int[]{0,1,0,1,1,1}); //16
	  cubes[17] = new Cube(new int[]{0,1,0,1,1,1});
	  cubes[18] = new Cube(new int[]{0,1,0,1,1,1});
	  cubes[19] = new Cube(new int[]{0,1,1,1,1,1});
	  
	  ship = new Ship();
  }
  /**
   * Resets the view of current frame
   */
  protected void resetView()
  {
    // clear color and depth buffer
    GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
  }
  
  /**
   * Renders current frame
   */
  protected void renderFrame() {
	  
	  s_posX = posX; 
	  s_posY = posY; 
	  s_posZ = posZ;
	  
	  cubes[0].setPosition(s_posX, s_posY, s_posZ);
	  s_posZ-=2;
	  cubes[1].setPosition(s_posX, s_posY, s_posZ);
	  s_posZ-=2;
	  cubes[2].setPosition(s_posX, s_posY, s_posZ);
	  s_posZ-=2;
	  cubes[3].setPosition(s_posX, s_posY, s_posZ);
	  s_posZ-=2;
	  cubes[4].setPosition(s_posX, s_posY, s_posZ);
	  s_posZ-=2;
	  cubes[5].setPosition(s_posX, s_posY, s_posZ);
	  s_posZ-=2;
	  cubes[6].setPosition(s_posX, s_posY, s_posZ);
	  s_posZ-=2;
	  cubes[7].setPosition(s_posX, s_posY, s_posZ);
	  s_posZ-=2;
	  cubes[8].setPosition(s_posX, s_posY, s_posZ);
	  s_posZ-=2;
	  cubes[9].setPosition(s_posX, s_posY, s_posZ);
	  s_posY+=2;
	  cubes[10].setPosition(s_posX, s_posY, s_posZ);
	  s_posY+=2;
	  cubes[11].setPosition(s_posX, s_posY, s_posZ);
	  s_posY+=2;
	  cubes[12].setPosition(s_posX, s_posY, s_posZ);
	  s_posX+=2;
	  cubes[13].setPosition(s_posX, s_posY, s_posZ);
	  s_posX+=2;
	  cubes[14].setPosition(s_posX, s_posY, s_posZ);
	  s_posX+=2;
	  cubes[15].setPosition(s_posX, s_posY, s_posZ);
	  s_posX+=2;
	  cubes[16].setPosition(s_posX, s_posY, s_posZ);
	  s_posX+=2;
	  cubes[17].setPosition(s_posX, s_posY, s_posZ);
	  s_posZ-=2;
	  cubes[18].setPosition(s_posX, s_posY, s_posZ);
	  s_posZ-=2;
	  cubes[19].setPosition(s_posX, s_posY, s_posZ);
	  
	  for(int i=0;i<20;i++) {
		  cubes[i].setRotation(rotX, rotY, rotZ);
		  cubes[i].setScaling(scale, scale, scale);
		  
		  //System.out.println("["+i+"] x="+s_posX+" y="+s_posY+" z="+s_posZ);
		  
		  cubes[i].render3D();
	  }
	  
	  ship.render3D();
	  super.renderFrame();
  }
  
  /**
   * Processes Keyboard and Mouse input and spawns actions
   */  
  protected void processInput() {
	  if (Keyboard.isKeyDown(Keyboard.KEY_W))
		  posZ+=0.02;
	  if (Keyboard.isKeyDown(Keyboard.KEY_S))
	      posZ-=0.02;
	  if (Keyboard.isKeyDown(Keyboard.KEY_A))
		  posX+=0.02;
	  if (Keyboard.isKeyDown(Keyboard.KEY_D))
	      posX-=0.02;
	  if (Keyboard.isKeyDown(Keyboard.KEY_F))
		  posY+=0.02;
	  if (Keyboard.isKeyDown(Keyboard.KEY_R))
	      posY-=0.02;
	  if (Keyboard.isKeyDown(Keyboard.KEY_LEFT))
		  rotY+=0.1;
	  if (Keyboard.isKeyDown(Keyboard.KEY_RIGHT))
		  rotY-=0.1;
	  if (Keyboard.isKeyDown(Keyboard.KEY_UP))
		  rotX+=0.1;
	  if (Keyboard.isKeyDown(Keyboard.KEY_DOWN))
		  rotX-=0.1;
	  if (Keyboard.isKeyDown(Keyboard.KEY_Q))
		  rotZ+=0.1;
	  if (Keyboard.isKeyDown(Keyboard.KEY_E))
		  rotZ-=0.1;
            
    super.processInput();
  }
  
  public static void main(String[] args) {
    (new Main()).execute();
  }  
}
