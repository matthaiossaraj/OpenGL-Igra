import org.lwjgl.opengl.GL11;

public class Cube extends Model3D {
	
	int[] sides; // front, right, back, left, top, bottom
	
	public Cube(int[] sides) {
		this.sides = sides;
	}
	
	public void render3D() {
	    // model view stack 
	    GL11.glMatrixMode(GL11.GL_MODELVIEW);
	    
	    // save current matrix
	    GL11.glPushMatrix();

	    // TRANSLATE 
	    GL11.glTranslatef(m_nX, m_nY, m_nZ);

	    // ROTATE and SCALE
	    GL11.glTranslatef(0, 0, -3.5f);
	    if (m_rZ!=0)
	      GL11.glRotatef(m_rZ, 0, 0, 1);
	    if (m_rY!=0)
	      GL11.glRotatef(m_rY, 0, 1, 0);
	    if (m_rX!=0)
	      GL11.glRotatef(m_rX, 1, 0, 0);
	    if (m_sX!=1 || m_sY!=1 || m_sZ!=1)
	      GL11.glScalef(m_sX, m_sY, m_sZ);
	    GL11.glTranslatef(0, 0, 3.5f);    

	    renderModel();
	    
	    // discard current matrix
	    GL11.glPopMatrix();
	}
	  
	private void renderModel() {
	    GL11.glBegin(GL11.GL_QUADS);
	    
	    if(sides[0]==1) { // front
	    	GL11.glColor3f(1, 0, 0); // red
		    GL11.glVertex3f(-1.0f, -1.0f, 1.0f); 
		    GL11.glVertex3f(1.0f, -1.0f, 1.0f); 
		    GL11.glVertex3f(1.0f, 1.0f, 1.0f);  
		    GL11.glVertex3f(-1.0f, 1.0f, 1.0f);
	    }
	    
	    if(sides[1]==1) { // right
	    	GL11.glColor3f(0, 1, 0); // green
		    GL11.glVertex3f(1.0f, -1.0f, 1.0f); 
		    GL11.glVertex3f(1.0f, 1.0f, 1.0f); 
		    GL11.glVertex3f(1.0f, 1.0f, -1.0f);  
		    GL11.glVertex3f(1.0f, -1.0f, -1.0f);
	    }
	    
		if(sides[2]==1) { // back
			GL11.glColor3f(0, 0, 1); // blue
			GL11.glVertex3f(-1.0f, -1.0f, -1.0f); 
		    GL11.glVertex3f(1.0f, -1.0f, -1.0f); 
		    GL11.glVertex3f(1.0f, 1.0f, -1.0f);  
		    GL11.glVertex3f(-1.0f, 1.0f, -1.0f);
		}
		if(sides[3]==1) { // left
			GL11.glColor3f(1, 1, 0); // yellow
		    GL11.glVertex3f(-1.0f, -1.0f, 1.0f); 
		    GL11.glVertex3f(-1.0f, -1.0f, -1.0f); 
		    GL11.glVertex3f(-1.0f, 1.0f, -1.0f); 
		    GL11.glVertex3f(-1.0f, -1.0f, 1.0f);
		}
		if(sides[4]==1) { // top
			GL11.glColor3f(1, 0, 1); // purple
		    GL11.glVertex3f(-1.0f, 1.0f, 1.0f); 
		    GL11.glVertex3f(-1.0f, 1.0f, -1.0f); 
		    GL11.glVertex3f(1.0f, 1.0f, -1.0f);  
		    GL11.glVertex3f(1.0f, 1.0f, 1.0f);
		}
		if(sides[5]==1) { // bottom
			GL11.glColor3f(0, 1, 1); // cyan
		    GL11.glVertex3f(-1.0f, -1.0f, 1.0f); 
		    GL11.glVertex3f(1.0f, -1.0f, 1.0f); 
		    GL11.glVertex3f(1.0f, -1.0f, -1.0f);  
		    GL11.glVertex3f(-1.0f, -1.0f, -1.0f);
		}
	    
	    GL11.glEnd();
	}
}

