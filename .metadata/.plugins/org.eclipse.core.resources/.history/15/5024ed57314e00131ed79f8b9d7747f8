import java.util.ArrayList;

import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;
import org.lwjgl.util.glu.GLU;

public class Main extends BaseWindow {

  float posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scale = 10;
  float s_posX = 0, s_posY = 0, s_posZ = 0;
  
  ArrayList<Cube> cubes  = new ArrayList();
  
  float aSpeed = 0.1f;
  float speed = 0.02f;
 
  Ship ship;

	/**
	 * Initial setup of projection of the scene onto screen, lights etc.
	 */
  protected void addCube(String direction, String next) {
	// front, right, back, left, top, bottom / x, y, z
	  	if(direction=="front") {
	  		s_posZ-=2;
		  	if(next=="front")
		  		cubes.add(new Cube(new int[]{0,1,0,1,1,1}, new float[]{s_posX,s_posY,s_posZ}));
		  	else if(next=="right")
		  		cubes.add(new Cube(new int[]{0,0,1,1,1,1}, new float[]{s_posX,s_posY,s_posZ}));
		  	else if(next=="left")
		  		cubes.add(new Cube(new int[]{0,1,1,0,1,1}, new float[]{s_posX,s_posY,s_posZ}));
		  	else if(next=="up")
		  		cubes.add(new Cube(new int[]{0,1,1,1,0,1}, new float[]{s_posX,s_posY,s_posZ}));
		  	else if(next=="down")
		  		cubes.add(new Cube(new int[]{0,1,1,1,1,0}, new float[]{s_posX,s_posY,s_posZ}));
	  	}
	  	if(direction=="back") {
	  		s_posZ+=2;
	  		if(next=="back")
		  		cubes.add(new Cube(new int[]{0,1,0,1,1,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="right")
		  		cubes.add(new Cube(new int[]{1,0,0,1,1,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="left")
		  		cubes.add(new Cube(new int[]{1,1,0,0,1,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="up")
		  		cubes.add(new Cube(new int[]{1,1,0,1,0,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="down")
		  		cubes.add(new Cube(new int[]{1,1,0,1,1,0}, new float[]{s_posX,s_posY,s_posZ}));
	  	}
	  	if(direction=="right") {
	  		s_posX+=2;
	  		if(next=="front")
		  		cubes.add(new Cube(new int[]{1,1,0,0,1,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="back")
		  		cubes.add(new Cube(new int[]{0,1,1,0,1,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="right")
		  		cubes.add(new Cube(new int[]{1,0,1,0,1,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="up")
		  		cubes.add(new Cube(new int[]{1,1,1,0,0,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="down")
		  		cubes.add(new Cube(new int[]{1,1,1,0,1,0}, new float[]{s_posX,s_posY,s_posZ}));
	  	}
	  	if(direction=="left") {
	  		s_posX-=2;
	  		if(next=="front")
		  		cubes.add(new Cube(new int[]{1,0,0,1,1,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="back")
		  		cubes.add(new Cube(new int[]{0,0,1,1,1,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="left")
		  		cubes.add(new Cube(new int[]{1,0,1,0,1,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="up")
		  		cubes.add(new Cube(new int[]{1,0,1,1,0,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="down")
		  		cubes.add(new Cube(new int[]{1,0,1,1,1,0}, new float[]{s_posX,s_posY,s_posZ}));
	  	}
	  	if(direction=="up") {
	  		s_posY+=2;
	  		if(next=="front")
		  		cubes.add(new Cube(new int[]{1,1,0,1,1,0}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="back")
		  		cubes.add(new Cube(new int[]{0,1,1,1,1,0}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="right")
		  		cubes.add(new Cube(new int[]{1,0,1,1,1,0}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="left")
		  		cubes.add(new Cube(new int[]{1,1,1,0,1,0}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="up")
		  		cubes.add(new Cube(new int[]{1,1,1,1,0,0}, new float[]{s_posX,s_posY,s_posZ}));
	  	}
	  	if(direction=="down") {
	  		s_posY-=2;
	  		if(next=="front")
		  		cubes.add(new Cube(new int[]{1,1,0,1,0,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="back")
		  		cubes.add(new Cube(new int[]{0,1,1,1,0,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="right")
		  		cubes.add(new Cube(new int[]{1,0,1,1,0,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="left")
		  		cubes.add(new Cube(new int[]{1,1,1,0,0,1}, new float[]{s_posX,s_posY,s_posZ}));
	  		else if(next=="down")
		  		cubes.add(new Cube(new int[]{1,1,1,1,0,0}, new float[]{s_posX,s_posY,s_posZ}));
	  	}
	  	if(direction=="start")
	  		cubes.add(new Cube(new int[]{0,1,0,1,1,1}, new float[]{s_posX,s_posY,s_posZ}));
  }
  
  protected void setupView()
	{    
    initializeModels();
    
    // enable depth buffer (off by default)
    GL11.glEnable(GL11.GL_DEPTH_TEST); 
    // enable culling of back sides of polygons
    //GL11.glEnable(GL11.GL_CULL_FACE);

    // mapping from normalized to window coordinates
    GL11.glViewport(0, 0, 1024, 768);

    // setup projection matrix stack
    GL11.glMatrixMode(GL11.GL_PROJECTION);
    GL11.glLoadIdentity();
    GLU.gluPerspective(45, 1024 / (float)768, 1.0f, 3000.0f);

    setCameraMatrix();    
	}
    
  protected void setCameraMatrix() {
	// model view stack 
	    GL11.glMatrixMode(GL11.GL_MODELVIEW);
	    GL11.glLoadIdentity();
	    // setup view space; 
	    // translate to 0,2,4 and rotate 30 degrees along x 
	    GL11.glTranslatef(0, 0, 0);
	    GL11.glRotatef(15.0f, 1.0f, 0.0f, 0.0f);
  }

  /** 
   * can be used for 3D model initialization
   */
  protected void initializeModels() {
	  addCube("start","front");
	  addCube("front","front");
	  addCube("front","front");
	  addCube("front","front");
	  addCube("front","right");
	  addCube("right","right");
	  addCube("right","front");
	  addCube("front","up");
	  addCube("up","up");
	  addCube("up","up");
	  addCube("up","left");
	  addCube("left","left");
	  addCube("left","left");
	  addCube("left","left");
	  addCube("left","left");
	  addCube("left","down");
	  addCube("down","down");
	  addCube("down","down");
	  addCube("down","down");
	  addCube("down","back");
	  addCube("back","back");
	  addCube("back","back");
	  addCube("back","left");
	  addCube("left","left");
	  addCube("left","left");
	  addCube("left","front");
	  addCube("front","front");
	  addCube("front","front");
	  
	  ship = new Ship();
  }
  /**
   * Resets the view of current frame
   */
  protected void resetView()
  {
    // clear color and depth buffer
    GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
  }
  
  /**
   * Renders current frame
   */
  protected void renderFrame() {
	  
	  for(int i=0;i<cubes.size();i++) {
		  Cube cube = cubes.get(i);
		  cubes.get(i).setPosition((posX+cube.translation[0]), (posY+cube.translation[1]), (posZ+cube.translation[2]));
		  cubes.get(i).setRotation(rotX, rotY, rotZ);
		  cubes.get(i).setScaling(scale, scale, scale);
		  
		  cubes.get(i).render3D();
	  }
	  
	  ship.render3D();
	  super.renderFrame();
  }
  
  protected float cos(float f) { // cos in degrees
	  double f_d = Math.toRadians(f);
	  float res = (float)Math.cos(f_d);
	  return res;
  }
  
  protected float sin(float f) { // sin in degrees
	  double f_d = Math.toRadians(f);
	  float res = (float)Math.sin(f_d);
	  return res;
  }
  
  /**
   * Processes Keyboard and Mouse input and spawns actions
   */  
  protected void processInput() {
	  if (Keyboard.isKeyDown(Keyboard.KEY_W)) {
		  if(rotY != 0) {
			  posZ+=cos((rotY%360))*speed;
			  posX-=sin((rotY%360))*speed;
		  }  
		  else
			  posZ+=speed;
		  System.out.println("posX="+posX+" posY="+posY+" posZ="+posZ+" rotX="+rotX+" rotY="+rotY+" rotZ="+rotZ);
	  }
	  if (Keyboard.isKeyDown(Keyboard.KEY_S)) {
		  if(rotY != 0) {
			  posZ-=cos((rotY%360))*speed;
			  posX+=sin((rotY%360))*speed;
		  }  
		  else
			  posZ-=speed;
		  System.out.println("posX="+posX+" posY="+posY+" posZ="+posZ+" rotX="+rotX+" rotY="+rotY+" rotZ="+rotZ);
	  }
	  if (Keyboard.isKeyDown(Keyboard.KEY_A)) {
		  if(rotY != 0) {
			  posZ+=sin((rotY%360))*speed;
			  posX-=cos((rotY%360))*speed;
		  }  
		  else
			  posX+=speed;
		  System.out.println("posX="+posX+" posY="+posY+" posZ="+posZ+" rotX="+rotX+" rotY="+rotY+" rotZ="+rotZ);
	  }
	  if (Keyboard.isKeyDown(Keyboard.KEY_D)) {
		  if(rotY != 0) {
			  posZ-=sin((rotY%360))*speed;
			  posX+=cos((rotY%360))*speed;
		  }  
		  else
			  posX-=speed;
		  System.out.println("posX="+posX+" posY="+posY+" posZ="+posZ+" rotX="+rotX+" rotY="+rotY+" rotZ="+rotZ);
	  }
	  if (Keyboard.isKeyDown(Keyboard.KEY_F))
		  posY+=0.02;
	  if (Keyboard.isKeyDown(Keyboard.KEY_R))
	      posY-=0.02;
	  if (Keyboard.isKeyDown(Keyboard.KEY_LEFT))
		  rotY-=0.1;
	  if (Keyboard.isKeyDown(Keyboard.KEY_RIGHT))
		  rotY+=0.1;
	  if (Keyboard.isKeyDown(Keyboard.KEY_UP))
		  rotX-=0.1;
	  if (Keyboard.isKeyDown(Keyboard.KEY_DOWN))
		  rotX+=0.1;
	  if (Keyboard.isKeyDown(Keyboard.KEY_Q))
		  rotZ+=0.1;
	  if (Keyboard.isKeyDown(Keyboard.KEY_E))
		  rotZ-=0.1;
            
    super.processInput();
  }
  
  public static void main(String[] args) {
    (new Main()).execute();
  }  
}
